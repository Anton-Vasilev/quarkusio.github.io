<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Thu, 19 Oct 2023 17:06:39 +0000</lastBuildDate>
        
        <item>
            <title>Compiling virtual thread applications into native executables</title>
            <link>
                https://quarkus.io/blog/virtual-threads-5/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://quarkus.io/blog/virtual-threads-2/&quot;&gt;another blog post&lt;/a&gt;, we have seen how you can implement a CRUD application with Quarkus to utilize virtual threads.
This post will show how you can compile such an application into a native executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-graalvm-21&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installing-graalvm-21&quot;&gt;&lt;/a&gt;Installing GraalVM 21&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To compile a Quarkus application leveraging virtual threads into a native executable, you need a GraalVM version supporting Java 21.
You can download it from &lt;a href=&quot;https://github.com/graalvm/graalvm-ce-builds/releases/tag/jdk-21.0.0&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, you can use the &lt;a href=&quot;https://sdkman.io/&quot;&gt;SDKMAN&lt;/a&gt; tool to install it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; sdk install java 21-graalce
Downloading: java 21-graalce

In progress...

Repackaging Java 21-graalce...

Done repackaging...
Cleaning up residual files...

Installing: java 21-graalce
Done installing!

Do you want java 21-graalce to be set as default? (Y/n): n&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once installed, make sure the &lt;code&gt;GRAALVM_HOME&lt;/code&gt; environment variable points to the GraalVM installation directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; export GRAALVM_HOME=$HOME/.sdkman/candidates/java/21-graalce&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;compiling-the-application-into-a-native-executable&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compiling-the-application-into-a-native-executable&quot;&gt;&lt;/a&gt;Compiling the application into a native executable&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will reuse the CRUD application developed in a &lt;a href=&quot;https://quarkus.io/blog/virtual-threads-2/&quot;&gt;previous blog post&lt;/a&gt;.
The source code is located in the &lt;a href=&quot;https://github.com/quarkusio/virtual-threads-demos/tree/main/crud-example&quot;&gt;virtual-threads-demos GitHub repository&lt;/a&gt;.
Note that while we are using the CRUD application, the same approach can be used with any Quarkus application leveraging virtual threads, including the other demos from the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First make sure you use Java 21+ and that the &lt;code&gt;GRAALVM_HOME&lt;/code&gt; environment variable points to the GraalVM installation directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, in the &lt;code&gt;pom.xml&lt;/code&gt; file, add the &lt;code&gt;native&lt;/code&gt; profile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;profiles&amp;gt;
  &amp;lt;profile&amp;gt;
    &amp;lt;id&amp;gt;native&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
        &amp;lt;property&amp;gt;
          &amp;lt;name&amp;gt;native&amp;lt;/name&amp;gt;
        &amp;lt;/property&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;properties&amp;gt;
        &amp;lt;quarkus.package.type&amp;gt;native&amp;lt;/quarkus.package.type&amp;gt;
      &amp;lt;/properties&amp;gt;
  &amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;native&lt;/code&gt; profile is activated when the &lt;code&gt;native&lt;/code&gt; property is set.
So, compile the application with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; mvn clean package -Dnative&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The compilation takes a few minutes.
Once done, you can run the application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1) First, start the database:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; docker run --ulimit memlock=-1:-1 -d -it --rm=true --memory-swappiness=0 \
    --name postgres-quarkus-demo -e POSTGRES_USER=restcrud \
    -e POSTGRES_PASSWORD=restcrud -e POSTGRES_DB=rest-crud \
    -p 5432:5432 postgres:15-bullseye&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2) Then, start the application:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; ./target/crud-example-1.0.0-SNAPSHOT-runner&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You get:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;&amp;gt; ./target/crud-example-1.0.0-SNAPSHOT-runner
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2023-10-17 09:44:34,925 INFO  [io.quarkus] (main) crud-example 1.0.0-SNAPSHOT native (powered by Quarkus 3.4.1) started in 0.072s. Listening on: http://0.0.0.0:8080
2023-10-17 09:44:34,925 INFO  [io.quarkus] (main) Profile prod activated.
2023-10-17 09:44:34,925 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, hibernate-validator, jdbc-postgresql, narayana-jta, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, vertx]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, open the application in a browser (&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;) and start adding, updating, and completing tasks.
You will see in the logs that the processing of these requests are executed on virtual threads:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-text hljs&quot; data-lang=&quot;text&quot;&gt;2023-10-17 10:15:09,992 INFO  [org.acm.cru.TodoResource] (quarkus-virtual-thread-0) Called on VirtualThread[#78,quarkus-virtual-thread-0]/runnable@ForkJoinPool-5-worker-1
2023-10-17 10:15:13,136 INFO  [org.acm.cru.TodoResource] (quarkus-virtual-thread-1) Called on VirtualThread[#85,quarkus-virtual-thread-1]/runnable@ForkJoinPool-5-worker-1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post explains how to compile a Quarkus application leveraging virtual threads into a native executable.
First, make sure that you have a GraalVM installation supporting Java 21+.
Then, add the &lt;code&gt;native&lt;/code&gt; profile to the &lt;code&gt;pom.xml&lt;/code&gt; file and compile the application using the &lt;code&gt;-Dnative&lt;/code&gt; option.
Finally, run it as any other native executable!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/virtual-threads-5/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
        <item>
            <title>Quarkus 2.16.12.Final released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-2-16-12-final-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned in previous blog posts, we encourage all our community users to upgrade to Quarkus 3.
Most of the heavy lifting can be done with &lt;a href=&quot;https://quarkus.io/guides/update-quarkus&quot;&gt;&lt;code&gt;quarkus update&lt;/code&gt;&lt;/a&gt;
but be aware that some components were updated to new major versions
and that migrating might require some time and careful testing if you are using these components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will continue to maintain 2.16.x until the end of October so we recommend that you start your migration process very soon.
Today, we released Quarkus 2.16.12.Final, the twelfth maintenance release of our 2.16 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release fixes several CVEs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-44487&quot;&gt;CVE-2023-44487&lt;/a&gt; for Netty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-39410&quot;&gt;CVE-2023-39410&lt;/a&gt; for Apache Avro&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-34454&quot;&gt;CVE-2023-34454&lt;/a&gt; for Snappy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 2.16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 2.16, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-2.16&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/2.16.12.Final&quot;&gt;the full changelog of 2.16.12.Final on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-2-16-12-final-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.4.3 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-4-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.4.3, our second maintenance release for our 3.4 release train (we skipped 3.4.0).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It upgrades Netty to 4.1.100.Final, fixing CVE-2023-44487.
It also includes a bunch of bugfixes, together with documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More releases are planned in the following days/weeks to address the issue in other maintained branches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.4.3, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To migrate from 3.3, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.4.3&quot;&gt;the full changelog of 3.4.3 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-4-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #37 - October</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-37/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read &quot;Integrate your Quarkus application with GPT4All&quot; by Alex Soto Bueno to explore how to integrate GPT4All into a Quarkus application so that you can query this service and return a response without any external resources. Go behind the scenes to learn how to create a CRUD application using virtual threads in Quarkus with Clement Escoffier&amp;#8217;s blog post &quot;Writing CRUD applications using virtual threads&quot;. Read &quot;Observability in Quarkus 3&quot; by Bruno Baptista to learn about Quarkus 3.3&amp;#8217;s many improvements to its main observability related extensions. Check out &quot;Deploy a Quarkus application to the Developer Sandbox with JetBrains IDEA&quot; by Andre Dietisheim to get to know how the JetBrains plugin assists you in deploying a Quarkus application as well as its unique features. Explore the testing possibilities offered by Quarkus and present concepts like dependency management and injection, mocking, profile configuration, and more specific things like Quarkus annotations and testing a native executable in baeldung&amp;#8217;s article, &quot;Testing Quarkus Applications&quot;. Learn about the CodeShift hackathon that brings together developers from all over the world to demonstrate their skills and creativity using Red Hat&amp;#8217;s cloud-native application development platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/37/&quot;&gt;Newsletter #37: October&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-37/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>A recap of Quarkus Tools for IntelliJ's latest improvements</title>
            <link>
                https://quarkus.io/blog/intellij-quarkus-recap/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/13234-quarkus-tools&quot;&gt;Quarkus Tools for IntelliJ&lt;/a&gt; is a free and open source extension, helping users develop Quarkus applications by providing content-assist, validation, run configurations and many other features right from their favourite IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This extension is based on the &lt;a href=&quot;https://github.com/eclipse/lsp4mp&quot;&gt;LSP4MP&lt;/a&gt; (i.e. MicroProfile) and its &lt;a href=&quot;https://github.com/redhat-developer/quarkus-ls/tree/master/quarkus.ls.ext&quot;&gt;Quarkus&lt;/a&gt; add-on, and the &lt;a href=&quot;https://github.com/redhat-developer/quarkus-ls/tree/master/qute.ls&quot;&gt;Qute language server&lt;/a&gt;. These are all used in our popular  &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=redhat.vscode-quarkus&quot;&gt;Quarkus Tools extension&lt;/a&gt; for Visual Studio Code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past five months, we&amp;#8217;ve been &lt;strong&gt;really&lt;/strong&gt; hard at work to improve Quarkus Tools in every possible way, averaging about one release every two weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve been focusing on performance improvements, Quarkus 3.x with JakartaEE namespace support, Qute templating support, and generally trying to keep Quarkus Tools out of your way. So let&amp;#8217;s look in more details at what was accomplished.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;increased-stability-and-performance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#increased-stability-and-performance&quot;&gt;&lt;/a&gt;Increased stability and performance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve addressed various critical issues in our custom Language Server client (LSP4IJ), that previously caused Language Servers to freeze IntelliJ IDEA. Improvements include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Waiting until indexing is finished before launching the language servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Language server requests no longer blocking the editor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debouncing some requests to minimize heavy processing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New request cancellation support to avoid unnecessary processing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Faster validation and lazy loading of quick fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced quarkus properties completion payload size.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pre-emptively fetching Quarkus data in the Quarkus project wizard, in order to avoid waiting after clicking on the &lt;code&gt;Next&lt;/code&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These fixes contribute to a smoother coding experience, better overall performance, and, dare I say it, &quot;developer joy&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;language-server-client-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#language-server-client-improvements&quot;&gt;&lt;/a&gt;Language Server client improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;language-servers-console&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#language-servers-console&quot;&gt;&lt;/a&gt;Language Servers console&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although not directly useful to users in most cases, the new Language Server console view is extremely important when we need to troubleshoot issues with the language servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The state of the servers is visible, stop and restart is available with a right-click, and you can enable different levels of tracing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/lsp-console-config.png&quot; alt=&quot;Language server configuration&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The communication details between the IDE and the language servers are seen in the &quot;LSP consoles&quot; pane. In &lt;code&gt;verbose&lt;/code&gt; mode, the messages can be expanded for more details:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/lsp-console-traces.png&quot; alt=&quot;Language server traces&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature has proven invaluable in assisting us in diagnosing performance issues with the extension. It will enable users to provide valuable troubleshooting information in case any issues arise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;language-servers-preferences&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#language-servers-preferences&quot;&gt;&lt;/a&gt;Language Servers preferences&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A preference page is now available, under &lt;code&gt;Preferences | Languages &amp;amp; Frameworks | Language Servers&lt;/code&gt;, allowing power users to configure language servers debugging and tracing:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/lsp-settings.png&quot; alt=&quot;Language servers preferences&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;application-properties-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#application-properties-support&quot;&gt;&lt;/a&gt;Application properties support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;completion-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#completion-improvements&quot;&gt;&lt;/a&gt;Completion improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Properties completion in &lt;code&gt;application.properties&lt;/code&gt; files now displays icons and documentation (provided &lt;code&gt;Preferences | Editor | General | Code Completion | Show the documentation popup&lt;/code&gt; is enabled):
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/properties-completion.png&quot; alt=&quot;Quarkus properties completion&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Completion is also available for enum values:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/properties-completion-enum.png&quot; alt=&quot;Quarkus properties enum completion&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;inlay-hints&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#inlay-hints&quot;&gt;&lt;/a&gt;Inlay hints&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Properties using expression values are now resolved as inlay hints:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/properties-inlay-hint.png&quot; alt=&quot;Resolved property expression as inlay hint&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inlay hints can be disabled in &lt;code&gt;Preferences | Languages &amp;amp; Frameworks | MicroProfile | Properties&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java-editing-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-editing-improvements&quot;&gt;&lt;/a&gt;Java editing improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-codelens-for-vert-x-reactive-routes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-codelens-for-vert-x-reactive-routes&quot;&gt;&lt;/a&gt;New codelens for Vert.x reactive routes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vert.x reactive routes now show a clickable codelens, that will open the browser to the configured URL, similar to JAX-RS endpoints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/reactive-routes.png&quot; alt=&quot;Reactive routes&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;qute-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#qute-improvements&quot;&gt;&lt;/a&gt;Qute improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve spent significant effort on making the best Qute support around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-syntax-coloration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-syntax-coloration&quot;&gt;&lt;/a&gt;New syntax coloration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Qute parser has been rewritten to allow for proper syntax coloration:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-syntax-coloration-light.png&quot; alt=&quot;Qute Syntax coloration - light theme&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-syntax-coloration-dark.png&quot; alt=&quot;Qute Syntax coloration - dark theme&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coloration settings are available at &lt;code&gt;Preferences | Editor | Color Scheme | Qute&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;completion-redux&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#completion-redux&quot;&gt;&lt;/a&gt;Completion redux&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Editing Qute templates is now better than ever, with new brackets autoclose, improved HTML integration, new completion icons. In particular, the enhanced snippet completion, that behaves like IntelliJ&amp;#8217;s live templates, available for different Qute sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-completion-snippets.gif&quot; alt=&quot;Qute snippet completion&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Section &lt;code&gt;{#}&lt;/code&gt; completion now displays user tags contributed by dependencies, like Renarde or Web Bundler:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-renarde-tags-completion.png&quot; alt=&quot;Renarde tags completion&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;improved-insert-and-include-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improved-insert-and-include-support&quot;&gt;&lt;/a&gt;Improved {#insert} and {#include} support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;{#insert}&lt;/code&gt; and &lt;code&gt;{#include}&lt;/code&gt; sections can be used to specify the extended template to include in the current template. This release extends the support for these sections with validation, document link, completion, and code lens.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;navigation-between-templatescode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#navigation-between-templatescode&quot;&gt;&lt;/a&gt;Navigation between templates/code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can navigate by &lt;code&gt;Ctrl+click&lt;/code&gt; (&lt;code&gt;Cmd+click&lt;/code&gt; on Mac), from one template to another (referenced as user tags, via &lt;code&gt;{#include}&lt;/code&gt; or &lt;code&gt;{#insert}&lt;/code&gt;), or from a template definition from a java file to the actual file:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-template-navigation.gif&quot; alt=&quot;Qute navigation&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-template-fragment-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-template-fragment-support&quot;&gt;&lt;/a&gt;New template fragment support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fragment sections define a part of the template that can be treated and rendered as a separate template. Support for fragments includes snippet completion, hover and validation.
In a java class, you can navigate to a referenced &lt;code&gt;#fragment&lt;/code&gt; via code lens and document link
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-fragment-support.gif&quot; alt=&quot;qute fragment support&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;renarde-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#renarde-support&quot;&gt;&lt;/a&gt;Renarde support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus Tools now provides support for the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-renarde/dev/index.html&quot;&gt;Renarde&lt;/a&gt; web framework:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Public methods of sub-classes of a Renarde &lt;code&gt;Controller&lt;/code&gt; automatically show a clickable codelens, even though they&amp;#8217;re lacking a HTTP method annotation, as they&amp;#8217;re treated as valid JAX-RS endpoints:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-renarde-codelens.png&quot; alt=&quot;Renarde endpoint codelens&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completion on the Renarde &lt;code&gt;uri&lt;/code&gt; and &lt;code&gt;uriabs&lt;/code&gt; namespaces lists available Renarde controllers:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-renarde-completion.png&quot; alt=&quot;Renarde uri completion&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quick-fix is available to add missing input fields to a &lt;code&gt;{#form}&lt;/code&gt; section:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-renarde-form-quickfix.gif&quot; alt=&quot;Renarde form quickfix&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;type-safe-message-bundles-partial-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#type-safe-message-bundles-partial-support&quot;&gt;&lt;/a&gt;Type-Safe Message Bundles partial support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have introduced partial support for Qute type-safe message bundles. If you defined &lt;code&gt;@MessageBundle&lt;/code&gt; classes in your code, you&amp;#8217;ll automatically get autocompletion for those messages in your Qute templates, with the messages rendered as inlay hints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-message-bundles.png&quot; alt=&quot;Message bundle support for Qute templates&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rendering messages from properties files is not yet supported.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;validation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#validation&quot;&gt;&lt;/a&gt;Validation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;java-files&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-files&quot;&gt;&lt;/a&gt;Java files&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Validation has been enhanced with the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GraphQL &lt;code&gt;void&lt;/code&gt; operations are now allowed in Quarkus 3.1 and higher and the correct placement of GraphQL directives is now checked:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/java-validation-graphql-directives.png&quot; alt=&quot;GraphQL directives placement validation&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quarkus &lt;code&gt;BuildItem&lt;/code&gt; subclasses are checked whether they&amp;#8217;re &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt;:
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/java-builditem-validation.png&quot; alt=&quot;BuildItem validation&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;severity-mappings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#severity-mappings&quot;&gt;&lt;/a&gt;Severity mappings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve tried to bind some Microprofile and Qute diagnostics reported by the language servers to IntelliJ&amp;#8217;s Inspections settings, as it felt more natural than having specialized preference pages. But, since this is a bit of a hack, the inspections settings are mostly ignored, except for a couple severity settings. The limitations are described in each inspection description:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/inspections-severity-mapping.png&quot; alt=&quot;Inspection severity mapping&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most cases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scope: values are ignored&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Severity: only Error and (Weak) Warning are respected. Other values mean no errors will be reported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Highlighting in Editor: values are ignored&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quick-fixes-updating-settings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quick-fixes-updating-settings&quot;&gt;&lt;/a&gt;Quick-fixes updating settings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve introduced quick fixes that allow you to disable validation for certain errors. Useful, for instance, when you find false-positive errors add too much noise to your development workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unassigned &lt;code&gt;@ConfigProperty&lt;/code&gt; properties (i.e not declared in &lt;code&gt;application.properties&lt;/code&gt;) in java files, or unknown properties (seemingly unused) declared in &lt;code&gt;application.properties&lt;/code&gt; can now be excluded from validation via a quick-fix, e.g:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/exclusions-quickfix.png&quot; alt=&quot;Quick-fix to exclude property from validation&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can then update those exclusions in &lt;code&gt;Preferences | Editor | Inspections | MicroProfile | Java files | Unassigned properties&lt;/code&gt; or &lt;code&gt;Preferences | Editor | Inspections | MicroProfile | Properties files | Unassigned properties&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/exclusions-settings.png&quot; alt=&quot;Inspections settings&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly you can exclude a particular Qute template from validation, or its entire module&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/exclude-qute-validation.png&quot; alt=&quot;Exclude Qute template from validation&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can then head over to &lt;code&gt;Preferences | Editor | Inspections | Qute | Templates | Validation&lt;/code&gt;,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/intellij-quarkus-tools-oct23/qute-validation-settings.png&quot; alt=&quot;Qute validation settings&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;miscellaneous-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#miscellaneous-improvements&quot;&gt;&lt;/a&gt;Miscellaneous improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Quarkus project wizard, on top of being super snappy, now offers easy (de)selection of extensions by double-clicking on them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects in WSL2 are now supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run configurations have been renamed to &lt;code&gt;Quarkus Dev Mode&lt;/code&gt;, to minimize confusion with IntelliJ Ultimate&amp;#8217;s built-in Quarkus support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vert.x reactive routes, JAX-RS and Renarde endpoints are now shown as implicitly used, as well as Quarkus &lt;code&gt;@BuildStep&lt;/code&gt;-annotated classes and &lt;code&gt;@Observer&lt;/code&gt;-annotated methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;looking-forward&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#looking-forward&quot;&gt;&lt;/a&gt;Looking forward&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus' &quot;developer joy&quot; mantra obviously applies to your time spent in the IDE and that&amp;#8217;s what the Red Hat Developer team is vying for. As we reflect on the past five months of releases, we&amp;#8217;re pretty excited about the progress we&amp;#8217;ve made on the Quarkus development experience, in IntelliJ IDEA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And we&amp;#8217;re not going to stop here, so stay tuned for more performance improvements and exciting new features in the coming weeks. We&amp;#8217;re actually planning to make it easier for you to get those new bits as soon as possible, by publishing updates to the EAP release channel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, if you haven&amp;#8217;t done it already, please &lt;a href=&quot;https://plugins.jetbrains.com/plugin/13234-quarkus-tools&quot;&gt;add your review to the JetBrains marketplace&lt;/a&gt;. Your feedback matters!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case you find bugs or have ideas for some great new features, don&amp;#8217;t hesitate to head over to our &lt;a href=&quot;https://github.com/redhat-developer/intellij-quarkus/issues&quot;&gt;Github repository&lt;/a&gt; and open a ticket.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/intellij-quarkus-recap/
            </guid>
            
            
            
            <author>Fred Bricon (https://twitter.com/fbricon)</author>
            
        </item>
        
        <item>
            <title>Processing Kafka records on virtual threads</title>
            <link>
                https://quarkus.io/blog/virtual-threads-4/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://quarkus.io/blog/virtual-threads-2/&quot;&gt;another blog post&lt;/a&gt;, we have seen how you can implement a CRUD application with Quarkus to utilize virtual threads.
The virtual threads support in Quarkus is not limited to REST and HTTP.
Many other parts support virtual threads, such as gRPC, scheduled tasks, and messaging.
In this post, we will see how you can process Kafka records on virtual threads, increasing the concurrency of the processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;processing-messages-on-virtual-threads&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#processing-messages-on-virtual-threads&quot;&gt;&lt;/a&gt;Processing messages on virtual threads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus Reactive Messaging extension supports virtual threads.
Similarly to HTTP, to execute the processing on a virtual thread, you need to use the &lt;code&gt;@RunOnVirtualThread&lt;/code&gt; annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Incoming(&quot;input-channel&quot;)
@Outgoing(&quot;output-channel&quot;)
@RunOnVirtualThread
public Fraud detect(Transaction tx) {
    // Run on a virtual thread
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The processing of each message runs on separate virtual threads.
So, for each message from the &lt;code&gt;input-channel&lt;/code&gt;, a new virtual thread is created (as seen in &lt;a href=&quot;https://quarkus.io/blog/virtual-thread-1/&quot;&gt;this blog post&lt;/a&gt;, virtual thread creation is cheap).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/virtual-threads/virtual-thread-messaging.png&quot; alt=&quot;Threading model of the messaging application&quot; width=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This execution model can be used with any Quarkus reactive messaging connector, including AMQP 1.0, Apache Pulsar, and Apache Kafka.
The concurrency of this processing is no longer limited by the number of worker threads, as it would with the &lt;code&gt;@Blocking&lt;/code&gt; annotation.
Thus, this novel execution model simplifies the development of highly concurrent data streaming applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we will see later, such high-level concurrency can cause problems.
To keep this concurrency controllable, Quarkus limits the number of concurrent message processing to &lt;code&gt;1024&lt;/code&gt; (This default value is &lt;a href=&quot;https://quarkus.io/guides/messaging-virtual-threads&quot;&gt;configurable&lt;/a&gt;).
One of the main benefits of this limit is preventing the application from polling millions of messages, which would be very expensive in terms of memory.
Without this limit, a Kafka application would poll all the records from the assigned topics-partitions and consume a large amount of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, you may wonder why we do not use virtual threads by default.
The reasons have been explained in &lt;a href=&quot;https://quarkus.io/blog/virtual-thread-1/#five-things-you-need-to-know-before-using-virtual-threads-for-everything&quot;&gt;a previous blog post&lt;/a&gt;.
There are limitations that can make virtual threads dangerous.
You need to make sure your virtual threads usage is safe before using it.
We will see a few examples in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;processing-kafka-records-on-virtual-threads&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#processing-kafka-records-on-virtual-threads&quot;&gt;&lt;/a&gt;Processing Kafka records on virtual threads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To illustrate how to process Kafka records on virtual threads, let&amp;#8217;s consider a simple application.
This application is a fake fraud detector.
It analyzes banking transactions, and if the transaction amount for a given account in a given period of time reaches a threshold, we consider there is fraud.
The code is available in this &lt;a href=&quot;https://github.com/quarkusio/virtual-threads-demos/tree/main/kafka-example&quot;&gt;GitHub repository&lt;/a&gt;.
Of course, you can use more complex detection algorithms, and even use AI/ML.
In this case, we use the &lt;a href=&quot;https://redis.io/docs/data-types/timeseries/&quot;&gt;Redis time series&lt;/a&gt; commands inefficiently to introduce more I/O than necessary.
It is done purposefully to utilize the virtual thread&amp;#8217;s ability to block:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Incoming(&quot;tx&quot;)
@Outgoing(&quot;frauds&quot;)
@RunOnVirtualThread
public Fraud detect(Transaction tx) {
    String key = &quot;account:transactions:&quot; + tx.account;

    // Add sample
    long timestamp = tx.date.toInstant(ZoneOffset.UTC).toEpochMilli();
    timeseries.tsAdd(key, timestamp, tx.amount, new AddArgs()
        .onDuplicate(DuplicatePolicy.SUM));

    // Retrieve the last sum.
    var range = timeseries.tsRevRange(key, TimeSeriesRange.fromTimeSeries(),
            // 1 min for demo purpose.
            new RangeArgs().aggregation(Aggregation.SUM, Duration.ofMinutes(1))
                    .count(1));

    if (!range.isEmpty()) {
        // Analysis
        var sum = range.get(0).value;
        if (sum &amp;gt; 10_000) {
            Log.warnf(&quot;Fraud detected for account %s: %.2f&quot;, tx.account, sum);
            return new Fraud(tx.account, sum);
        }
    }
    return null;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you run this application and have a burst of transactions, it will not work.
The processing is correctly executed on virtual threads.
However, the Redis connection pool has not been tuned to handle that concurrency level.
Very quickly, no Redis connections are available, and it starts enqueuing the commands into a waiting list.
When this queue is full, it starts rejecting the commands.
Fortunately, you can configure the max size of the waiting queue with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Increase Redis pool size (and waiting queue size) as we will have a lot of concurrency
quarkus.redis.max-pool-size=100 # Number of connection in the pool
quarkus.redis.max-pool-waiting=10000 # Waiting queue max size&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While we use Redis in this application, you will face identical problems with many other clients (including HTTP clients).
So, configure them properly to handle this new level of concurrency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you run the application and open the UI, you will see that the concurrency reached a maximum of 1024, as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/virtual-threads/fraud-detection-screenshot.png&quot; alt=&quot;The application reached 1024 as top concurrency&quot; width=&quot;800&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-note-about-pinning-and-monopolization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-note-about-pinning-and-monopolization&quot;&gt;&lt;/a&gt;A note about pinning and monopolization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our messaging connectors have been tailored to avoid pinning.
It is also the case for the Quarkus Redis client.
Thus, this application does not pin the carrier thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But pinning is not the only problem that can arise.
While virtual threads can be appealing, you must be careful not to monopolize the carrier thread.
If, for example, you implemented a complex and CPU-intensive detection algorithm instead of relying on Redis, you would likely monopolize the carrier thread, defeating the purpose of virtual threads.
It will force the JVM to create new carrier threads, ultimately increasing memory usage.
The JVM will limit the number of created carrier threads.
When this happens, your application will under-perform as your tasks will be enqueued until a carrier thread is available.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post explains how you can execute message processing on virtual threads.
While the example uses Kafka, you can use the same approach with the other messaging connectors provided by Quarkus.
Do not forget that such kind of application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;requires tuning connection pools, as the concurrency is much higher than before&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;can lead to monopolization if your processing is CPU-intensive&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/virtual-threads-4/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.4.2 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-4-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.4.2, our first maintenance release for our 3.4 release train (we skipped 3.4.0).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It includes a bunch of bugfixes, together with documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.4.2, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To migrate from 3.3, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.4.2&quot;&gt;the full changelog of 3.4.2 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-4-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Testing virtual thread applications</title>
            <link>
                https://quarkus.io/blog/virtual-threads-3/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/virtual-threads-2/&quot;&gt;In a previous post&lt;/a&gt;, we have seen how to implement a CRUD application using virtual threads in Quarkus.
The following video shows how to test this application and, specifically, how to detect pinning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;
&lt;iframe style=&quot;margin-left: auto; margin-right: auto; display: block;&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GOHAEh3Ujh8?si=t8n8jLek0X7JC4MR&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The complete code of the application and the tests are available in the &lt;a href=&quot;https://github.com/quarkusio/virtual-threads-demos/tree/main/crud-example&quot;&gt;virtual threads demos repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pinning-and-monopolization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pinning-and-monopolization&quot;&gt;&lt;/a&gt;Pinning and Monopolization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Virtual threads combine an imperative development model with a reactive execution mode.
It may provide a simple way to increase the concurrency of an application.
However, this might not always be the case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described in &lt;a href=&quot;https://quarkus.io/blog/virtual-thread-1/&quot;&gt;another blog post&lt;/a&gt;, there are a few limitations, including monopolizing and pinning carrier threads.
When this happens, the application&amp;#8217;s performance can drastically decrease and increase memory usage.
Pinning for a short period can be tolerated, but it can be dramatic under load.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While, at the moment, there are no reliable ways to detect monopolization, there are mechanisms to detect pinning.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;printing-stack-traces-when-a-carrier-thread-gets-pinned&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#printing-stack-traces-when-a-carrier-thread-gets-pinned&quot;&gt;&lt;/a&gt;Printing stack traces when a carrier thread gets pinned&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suppose you have your application, and your code base contains tests.
You can configure Surefire (or the plugin you use to execute your tests) to dump a stack trace as soon as a virtual thread is going to pin the carrier thread (instead of being unmounted smoothly).
You must set the &lt;code&gt;jdk.tracePinnedThreads&lt;/code&gt; system property to achieve this.
For the Surefire Maven plugin, add the &lt;code&gt;argLine&lt;/code&gt; parameter to the configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;argLine&amp;gt;-Djdk.tracePinnedThreads&amp;lt;/argLine&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this configuration, when, while running your test, a carrier thread is pinned, the stack trace is dumped in the console:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-text hljs&quot; data-lang=&quot;text&quot;&gt;2023-09-15 07:51:18,312 INFO  [org.acm.cru.TodoResource] (quarkus-virtual-thread-0) Called on VirtualThread[#140,quarkus-virtual-thread-0]/runnable@ForkJoinPool-1-worker-1
Thread[#141,ForkJoinPool-1-worker-1,5,CarrierThreads]
    java.base/java.lang.VirtualThread$VThreadContinuation.onPinned(VirtualThread.java:185)
    java.base/jdk.internal.vm.Continuation.onPinned0(Continuation.java:393)
    java.base/java.lang.VirtualThread.parkNanos(VirtualThread.java:631)
    java.base/java.lang.VirtualThread.sleepNanos(VirtualThread.java:803)
    java.base/java.lang.Thread.sleep(Thread.java:507)
    org.acme.crud.TodoResource.pinTheCarrierThread(TodoResource.java:93) &amp;lt;== monitors:1
    org.acme.crud.TodoResource.getAll(TodoResource.java:32)
    org.acme.crud.TodoResource$quarkusrestinvoker$getAll_0e9c86666ef01bafda5560c4bf86952c6cf09993.invoke(Unknown Source)
    org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)
    io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)
    org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)
    io.quarkus.virtual.threads.ContextPreservingExecutorService$1.run(ContextPreservingExecutorService.java:36)
    java.base/java.util.concurrent.ThreadPerTaskExecutor$TaskRunner.run(ThreadPerTaskExecutor.java:314)
    java.base/java.lang.VirtualThread.run(VirtualThread.java:311)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Analyzing the application logs will tell you whether your application is pinning.
Furthermore, a closer look at the stack trace will give you the reason.
In our example, the &lt;code&gt;pinTheCarrierThread&lt;/code&gt; method is taking a lock.
This is indicated by the &lt;code&gt;monitors:1&lt;/code&gt; text:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-text hljs&quot; data-lang=&quot;text&quot;&gt;    org.acme.crud.TodoResource.pinTheCarrierThread(TodoResource.java:93) &amp;lt;== monitors:1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach can also be used in production (so, not only in tests).
You can also determine how long the carrier thread was blocked by correlating the pinned stack trace with other log events (like what happened just after in the same thread).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;failing-tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#failing-tests&quot;&gt;&lt;/a&gt;Failing tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dumping the stack trace may not be very convenient when your logs are already long.
Fortunately, we released a small Junit 5 extension that allows you to fail the tests when pinning is detected.
It&amp;#8217;s advantageous when you integrate a third-party library, and you need to know how virtual-thread-friendly it is (to decide between regular worker threads and virtual threads)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The loom-unit Junit5 extension is currently a separated project.
We are integrating it into the Quarkus test framework (under the &lt;code&gt;junit5-virtual-threads&lt;/code&gt; name), so some of the steps mentioned below won&amp;#8217;t be necessary anymore or will be changed slightly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use this extension, make sure you have the loom-unit extension in your project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;me.escoffier.loom&amp;lt;/groupId&amp;gt; &amp;lt;!-- Will become io.quarkus.junit5 --&amp;gt;
    &amp;lt;artifactId&amp;gt;loom-unit&amp;lt;/artifactId&amp;gt;   &amp;lt;!-- Will become junit5-virtual-threads --&amp;gt;
    &amp;lt;version&amp;gt;0.3.0&amp;lt;/version&amp;gt;             &amp;lt;!-- Will become unnecessary --&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, in your test,  use &lt;code&gt;@ExtendWith&lt;/code&gt; to enable the extension:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@QuarkusTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@ExtendWith(LoomUnitExtension.class) // &amp;lt;--- Enable the extension (will become @VirtualThreadUnit)
@ShouldNotPin  // &amp;lt;--- Detect pinning
class TodoResourceTest {
    // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, use the &lt;code&gt;@ShouldNotPin&lt;/code&gt; annotation to indicate to fail the test if any of the methods of the test case pins the carrier thread.
You can also use the &lt;code&gt;@ShouldNotPin&lt;/code&gt; annotation on methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If, during the execution of a test, a pinning event is captured, the test fails.
The stack trace of the event is attached to the test failure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-text hljs&quot; data-lang=&quot;text&quot;&gt;java.lang.AssertionError: The test testInitialItems() was expected to NOT pin the carrier thread, but we collected 1 event(s)
* Pinning event captured:
	java.lang.VirtualThread.parkOnCarrierThread(java.lang.VirtualThread.java:687)
	java.lang.VirtualThread.parkNanos(java.lang.VirtualThread.java:646)
	java.lang.VirtualThread.sleepNanos(java.lang.VirtualThread.java:803)
	java.lang.Thread.sleep(java.lang.Thread.java:507)
	org.acme.crud.TodoResource.pinTheCarrierThread(org.acme.crud.TodoResource.java:93)
	org.acme.crud.TodoResource.getAll(org.acme.crud.TodoResource.java:32)
	org.acme.crud.TodoResource$quarkusrestinvoker$getAll_0e9c86666ef01bafda5560c4bf86952c6cf09993.invoke(org.acme.crud.TodoResource$quarkusrestinvoker$getAll_0e9c86666ef01bafda5560c4bf86952c6cf09993.java:-1)
	org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(org.jboss.resteasy.reactive.server.handlers.InvocationHandler.java:29)
	io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.java:141)
	org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.java:147)
	io.quarkus.virtual.threads.ContextPreservingExecutorService$1.run(io.quarkus.virtual.threads.ContextPreservingExecutorService$1.java:36)
	java.util.concurrent.ThreadPerTaskExecutor$TaskRunner.run(java.util.concurrent.ThreadPerTaskExecutor$TaskRunner.java:314)
	java.lang.VirtualThread.runWith(java.lang.VirtualThread.java:341)
	java.lang.VirtualThread.run(java.lang.VirtualThread.java:311)
	java.lang.VirtualThread$VThreadContinuation$1.run(java.lang.VirtualThread$VThreadContinuation$1.java:192)
	jdk.internal.vm.Continuation.enter0(jdk.internal.vm.Continuation.java:320)
	jdk.internal.vm.Continuation.enter(jdk.internal.vm.Continuation.java:312)
	jdk.internal.vm.Continuation.enterSpecial(jdk.internal.vm.Continuation.java:-1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find more about the loom-unit extension on &lt;a href=&quot;https://github.com/cescoffier/loom-unit&quot;&gt;the project repository&lt;/a&gt; or its &lt;a href=&quot;https://github.com/quarkusio/quarkus/tree/main/independent-projects/junit5-virtual-threads&quot;&gt;Quarkus sibling&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog explains how you can detect pinning events while running your tests.
First, you can dump the stack trace in the log.
Second, you can use the &lt;code&gt;@ShouldNotPin&lt;/code&gt; annotation to fail the tests if a pinning event is captured.
Thanks to this &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/35992&quot;&gt;PR&lt;/a&gt;, the loom-unit extension will be integrated into the &lt;code&gt;@QuarkusTest&lt;/code&gt; to provide a simpler developer experience.
It will be part of Quarkus in the next release (3.5.x).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/virtual-threads-3/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
        <item>
            <title>Live diff and update quarkus deployments in OpenShift using Jetbrains IDEA</title>
            <link>
                https://quarkus.io/blog/live-diff-and-update-using-idea/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenShift CLI, oc: &lt;a href=&quot;https://docs.openshift.com/container-platform/4.13/cli_reference/openshift_cli/getting-started-cli.html&quot;&gt;installation instructions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes by Red Hat, Kubernetes Plugin for JetBrains IDEA &lt;a href=&quot;https://plugins.jetbrains.com/plugin/15921-kubernetes-by-red-hat&quot;&gt;Marketplace&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quarkus CLI, Quarkus: &lt;a href=&quot;https://quarkus.io/guides/cli-tooling&quot;&gt;Installation Instructions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional: Source code for this blog post: &lt;a href=&quot;https://github.com/adietish/openshift-quickstart&quot;&gt;https://github.com/adietish/openshift-quickstart&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intellij-kubernetes-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intellij-kubernetes-plugin&quot;&gt;&lt;/a&gt;IntelliJ Kubernetes Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shows you how the &lt;strong&gt;Kubernetes Plugin for Jetbrains IDEA&lt;/strong&gt; is a great companion when deploying quarkus apps to OpenShift. To install the plugin in Jetbrains IDEA, navigate to the Settings, go to the Plugins section, and search for &quot;Kubernetes by Red Hat&quot; to initiate the installation process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/install-intellij-kubernetes.png&quot; alt=&quot;Install Kubernetes by Red Hat&quot; width=&quot;600&quot; height=&quot;401&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By utilizing the plugin, you will have an extra tool window positioned on the left side of your IDEA interface. This window displays the Kubernetes clusters specified in your Kubernetes configuration located at &lt;em&gt;~/.kube/config&lt;/em&gt;. If you haven&amp;#8217;t defined any clusters yet, the list will be empty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/toolwindow.png&quot; alt=&quot;Kubernetes by Red Hat Tool Window&quot; width=&quot;600&quot; height=&quot;172&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prepare-your-quarkus-application-for-openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prepare-your-quarkus-application-for-openshift&quot;&gt;&lt;/a&gt;Prepare your Quarkus application for OpenShift&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Kubernetes plugin for IDEA successfully installed, we can now proceed to prepare our source code for deployment to OpenShift. You have the option to either retrieve the source from &lt;a href=&quot;https://github.com/adietish/openshift-quickstart&quot;&gt;GitHub&lt;/a&gt;, utilize your existing source code, or create a new Quarkus application from scratch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Assuming that you have your own source, we need to prepare it for deployment on OpenShift. Quarkus offers extensions that do most of the job for you. We need the &lt;a href=&quot;https://quarkus.io/guides/deploying-to-openshift&quot;&gt;OpenShift extension&lt;/a&gt; and the &lt;a href=&quot;https://quarkus.io/guides/container-image#jib&quot;&gt;jib extension&lt;/a&gt;. You can enable them using the Quarkus command line or add them manually to your pom file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-openshift&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-container-image-jib&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;If you want to generate a Quarkus app from scratch you can use the &lt;a href=&quot;https://quarkus.io/guides/cli-tooling&quot;&gt;quarkus&lt;/a&gt; command line utility to configure those for you.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus create app org.acme:openshift-quickstart \
--extension='resteasy-reactive,openshift,quarkus-container-image-jib'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;Now that you have your source ready, you can open it in Jetbrains IDEA and get on with the steps towards deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;publish-the-image-to-docker-hub&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#publish-the-image-to-docker-hub&quot;&gt;&lt;/a&gt;Publish the Image to Docker Hub&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The project generated by the Quarkus command line tool includes a Dockerfile located at &lt;em&gt;src/main/docker/Dockerfile.jvm&lt;/em&gt;. If you decide to use your own source code, you can easily copy the Dockerfile from the provided GitHub repository containing the sample source code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/dockerfile.png&quot; alt=&quot;Dockerfile&quot; width=&quot;600&quot; height=&quot;222&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Dockerfile is utilized to generate a Docker image, which is used by OpenShift (or Kubernetes) to run your application. In order for OpenShift to access and utilize the image, it needs to be stored in a Docker registry.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While most OpenShift or Kubernetes installations provide their own Docker registry, the Red Hat developer sandbox does not. Consequently, we will employ Docker Hub for this purpose. To accomplish this, we will configure the build process to push the image to Docker Hub. Although these settings can be specified via the command line, for the sake of simplicity, we will utilize the &lt;em&gt;src/main/resources/application.properties&lt;/em&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;We are pushing the docker image to Docker Hub. We thus need to provide our account ID with quarkus.container-image.group&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.container-image.build=true
quarkus.openshift.jvm-dockerfile=src/main/Dockerfile.jvm
quarkus.container-image.builder=jib
quarkus.container-image.push=true
quarkus.container-image.group=&amp;lt;your Docker Hub account&amp;gt; # use your Docker Hub account
quarkus.container-image.name=openshift-quickstart
quarkus.openshift.route.expose=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we instruct the maven build to build the Docker image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;quarkus.container-image.build=true&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we point the build to our Docker file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;quarkus.openshift.jvm-dockerfile=src/main/Dockerfile.jvm&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore we tell the maven to use the jib extension to create the Docker image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;quarkus.container-image.builder=jib&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also instruct the build to push the Docker image to a registry. Use your Docker Hub account for this setting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;quarkus.container-image.push=true&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hand it our account on Docker hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;quarkus.container-image.group=&amp;lt;your Docker Hub account&amp;gt; # use your Docker Hub account&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We configure the name of the resulting Docker image for easy identification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;quarkus.container-image.name=openshift-quickstart&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally we instruct the build to create a Route so that our application is accessible from the internet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;quarkus.openshift.route.expose=true&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the &lt;strong&gt;build configuration successfully set up&lt;/strong&gt;, we are now prepared to execute the build process. Simply running the Maven package command is all that&amp;#8217;s required to package the application into a JAR file, create a Docker image with the JAR, and push the image to Docker Hub. To initiate the build, locate the Maven toolbox on the right edge of your IDEA and &lt;strong&gt;&lt;em&gt;double-click on the package command.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/maven-package.png&quot; alt=&quot;mvn package&quot; width=&quot;600&quot; height=&quot;386&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively you can launch maven on the command line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;./mvnw clean package&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the build process, you will observe the execution of all the aforementioned steps in the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] LogEvent [level=INFO, message=trying docker-credential-desktop for registry.hub.docker.com]
[INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] Using base image with digest: sha256:f921cf1f9147e4b306908f3bcb61dd215b4a51970f8db560ede02ee6a492fa99
[INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] LogEvent [level=LIFECYCLE, message=Using credentials from Docker config (/Users/andredietisheim/.docker/config.json) for adietish/openshift-quickstart:1.0.0-SNAPSHOT]
[INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] Container entrypoint set to [java, -Djava.util.logging.manager=org.jboss.logmanager.LogManager, -jar, quarkus-run.jar]
[INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] Pushed container image adietish/openshift-quickstart:1.0.0-SNAPSHOT (sha256:bfba9dd104b363e828a61bde800cd2299fae8b65fc9a5ffcd4c322061b3a8c0e)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;get-your-free-red-hat-developer-sandbox&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-your-free-red-hat-developer-sandbox&quot;&gt;&lt;/a&gt;Get your free Red Hat Developer Sandbox&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s focus on the cluster to which we intend to deploy. Red Hat provides a free OpenShift cluster for individuals interested in exploring its capabilities. To obtain your own cluster, simply visit &lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;https://developers.redhat.com/developer-sandbox&lt;/a&gt; and request an instance. Once you complete a quick and straightforward registration process, you can start the cluster and access its web console. In the console, your username will be visible in the upper right corner of the header. Clicking on it will display a menu with an option labeled &quot;&lt;strong&gt;&lt;em&gt;Copy login command&lt;/em&gt;&lt;/strong&gt;.&quot; By selecting this option, you will configure the Red Hat Developer Sandbox as your current cluster and store a locally accessible token for authentication purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/copy-login-command.png&quot; alt=&quot;Copy Login Command&quot; width=&quot;400&quot; height=&quot;374&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/login-command.png&quot; alt=&quot;Login command&quot; width=&quot;624&quot; height=&quot;62&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now copy, paste and run this command in your terminal shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;oc login --token=sha256~XXXXXXXXXXXXXXXX --server=https://api.sandbox-m3.1530.p1.openshiftapps.com:6443&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;If you already have a Red Hat Developer Sandbox, chances are that your token is expired. You would notice this when listing the projects isn’t possible.&lt;br&gt;
To get a new token, you proceed as shown above. You copy the login command and run it in your shell.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intellij-kubernetes-is-your-friend&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intellij-kubernetes-is-your-friend&quot;&gt;&lt;/a&gt;IntelliJ Kubernetes is your friend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In IntelliJ, you can navigate to the Kubernetes tool window, where you will find the Red Hat Developer Sandbox set as the active cluster. By expanding the cluster, you can explore various resource categories that reveal the existing resources within your cluster. For example, you can view your current project or namespace. It&amp;#8217;s important to note that any action performed through the plugin will be executed within the context of this project and the changes get visible immediately. There’s no need for a manual refresh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/resource-tree.png&quot; alt=&quot;Resource tree&quot; width=&quot;600&quot; height=&quot;448&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-the-cluster-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-the-cluster-resources&quot;&gt;&lt;/a&gt;Create the Cluster Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon executing the Maven build, a file is generated in the &lt;em&gt;target/kubernetes&lt;/em&gt; directory. This file encompasses the OpenShift resources necessary for deploying your application. This is done by the Quarkus Kubernetes Extension. The Intelij plugin works with this file so you can use it both for automation but also via your IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/openshift-resources.png&quot; alt=&quot;OpenShift resources&quot; width=&quot;600&quot; height=&quot;374&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you open this file, you can have a glimpse on how your application is deployed. The file consists of the following OpenShift resources:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DeploymentConfig&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ImageStream&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Route&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;DeploymentConfig&lt;/strong&gt; will be responsible for creating a &lt;strong&gt;Pod&lt;/strong&gt;, which serves as an environment for running containers that host your application. These containers will utilize the Docker image you have built and published on Docker Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;kind: DeploymentConfig
...
  image: openshift-quickstart:1.0.0-SNAPSHOT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make the Docker image available to the cluster, an &lt;strong&gt;ImageStream&lt;/strong&gt; is utilized. This ImageStream is configured to reference your image stored on Docker Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;kind: ImageStream
...
  dockerImageRepository: docker.io/adietish/openshift-quickstart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To expose your application within the cluster, a &lt;strong&gt;Service&lt;/strong&gt; is employed. This Service is responsible for mapping the container ports to ports that are accessible internally within the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;kind: Service
...
- name: https
  port: 443
  protocol: TCP
  targetPort: 8443&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, a &lt;strong&gt;Route&lt;/strong&gt; is utilized to expose the Service to the internet, making your application accessible from external sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;kind: Route
...
port:
  targetPort: http
to:
  kind: Service
  name: openshift-quickstart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To deploy your application, simply create these resources on the cluster. The editor will prompt you to push the file to the cluster and generate the necessary resources. Alternatively, you can use the &lt;strong&gt;push&lt;/strong&gt; icon that’s the first icon to the left in the toolbar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/push-to-create.png&quot; alt=&quot;push to create&quot; width=&quot;800&quot; height=&quot;124&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resource tree in the Kubernetes toolkit window is highly dynamic, continuously reflecting the presence and absence of cluster resources. When you push the resource file, the corresponding resources are created on the cluster and instantly appear in the resource tree. The specific resources we are currently interacting with can be found under the &lt;strong&gt;Workloads&lt;/strong&gt; and &lt;strong&gt;Network&lt;/strong&gt; categories in the resource tree.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/new-resources.png&quot; alt=&quot;new resources&quot; width=&quot;600&quot; height=&quot;686&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pods in the resource tree are represented by icons displaying either a &lt;strong&gt;red&lt;/strong&gt; or &lt;strong&gt;green&lt;/strong&gt; dot. A green dot signifies that the pod is currently running, while a red dot indicates that the pod is either in the process of being initialized or terminated. By expanding a pod in the tree, additional information is revealed, including its internal cluster IP and the status of its container(s). In the provided screenshot, the pod consists of a single container that is currently running.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;browse-the-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#browse-the-application&quot;&gt;&lt;/a&gt;Browse the Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to access the application through a browser, we require its URL. In our configuration, we let OpenShift generate the host name for us. This was accomplished by configuring the &lt;strong&gt;Route&lt;/strong&gt; to have an empty or nonexistent host value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;kind: Route
...
  host: &quot;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hence, it is necessary for us to determine the hostname generated by the cluster. To achieve this, we can utilize the available &lt;strong&gt;Diff&lt;/strong&gt; feature in the editor, which displays the disparities between the resources specified in our file and the resources that currently exist on the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/diff-action.png&quot; alt=&quot;Diff action&quot; width=&quot;710&quot; height=&quot;102&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clicking on the &lt;strong&gt;Diff&lt;/strong&gt; action in the toolbar will open a split dialog. The left section of the dialog displays the local file, while the right section displays the resources that currently exist on the cluster. At this point, you can search for the host value and copy it once you locate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/diff-window.png&quot; alt=&quot;Diff window&quot; width=&quot;600&quot; height=&quot;386&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now paste it into a browser see the Quarkus framework page that our application displays when queried. The page shows you that the app consists of a REST service at &lt;strong&gt;/hello&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/quarkus-framework-page.png&quot; alt=&quot;Quarkus framework page&quot; width=&quot;600&quot; height=&quot;261&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click the hello-link and you can then see the response of this service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/hello-from-resteasy.png&quot; alt=&quot;Hello RESETEasy Reactive&quot; width=&quot;624&quot; height=&quot;62&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-please-log-everything&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-please-log-everything&quot;&gt;&lt;/a&gt;Quarkus, please log everything&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus framework logs any event that’s at least INFO. To change this, we can &lt;a href=&quot;https://quarkus.io/guides/logging#runtime-configuration&quot;&gt;configure&lt;/a&gt; the property quarkus.log.level in application.properties. Alternatively one can set it by an &lt;a href=&quot;https://quarkus.io/guides/config-reference#environment-variables&quot;&gt;environment variable&lt;/a&gt;. This is especially useful when you deploy to an OpenShift or Kubernetes cluster. In OpenShift the DeploymentConfig allows you to set the environment for its pods. In your openshift.yml file you will find an environment variable already. It sets the environment variable KUBERNETES_NAMESPACE to the name of your namespace. We can add our property and configure the quarkus logging level. Go to DeploymentConfig &amp;gt; template &amp;gt; spec &amp;gt; containers &amp;gt; env and add the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;- name: QUARKUS_LOG_LEVEL
  value: ALL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The editor continuously monitors your modifications and reminds you to push them once a resource has been changed. While you could typically proceed with pushing the changes to the cluster, we recommend deleting the existing &lt;strong&gt;DeploymentConfig&lt;/strong&gt; first and then pushing the updated version. This is particularly important when modifying environment variables, as a &quot;running&quot; DeploymentConfig would not be affected by the changes, leading to pods without the updated environment variables. Therefore, use the &quot;&lt;strong&gt;Delete&lt;/strong&gt;&quot; option available in the context menu of your DeploymentConfig.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/delete-deploymentconfig.png&quot; alt=&quot;Delete Deployment Config&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin then notifies you that the DeploymentConfig was successfully deleted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/deploymentconfig-deleted.png&quot; alt=&quot;Deployment Config Deleted&quot; width=&quot;709&quot; height=&quot;126&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The editor then prompts you to push and recreate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/push-to-create-deploymentconfig.png&quot; alt=&quot;Push to create Deployment Config&quot; width=&quot;800&quot; height=&quot;123&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deleting the existing DeploymentConfig terminated the existing pods. They disappeared from the resource tree. When you recreated it new Pods were created. These also reappeared as you were spawned. The tree is fully dynamic and reflects changes to the resources as they occur.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;follow-logs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#follow-logs&quot;&gt;&lt;/a&gt;Follow Logs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we told quarkus to log all we’d like to verify that our change is effective. We can pick &lt;strong&gt;Follow Log&lt;/strong&gt; in the context menu of the new pod.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/follow-logs.png&quot; alt=&quot;Follow Logs&quot; width=&quot;806&quot; height=&quot;338&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shows the Log console in the lower part of your IDE. It prints the log entries as they are coming in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/pod-logs.png&quot; alt=&quot;Pod Logs&quot; width=&quot;647&quot; height=&quot;429&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that the quarkus application is logging all events from FATAL to TRACE. A quarkus app by default only logs INFO and upwards. The environment variable that we added caused finer logging to happen.&lt;br&gt;
The log console is split in half. The right side shows the log while the left side shows the containers. Our pod only holds a single container and we therefore only see a single entry. A pod that consists of several containers would have these listed, init containers included. You could then have terminals to either one of these and switch between them by clicking on the listed containers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;terminal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#terminal&quot;&gt;&lt;/a&gt;Terminal&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can of course also verify in the terminal that the environment is set as defined in the DeploymentConfig. We can pick &lt;strong&gt;Terminal&lt;/strong&gt; in the context menu of our pod for this sake.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/open-terminal-action.png&quot; alt=&quot;Open Terminal Action&quot; width=&quot;860&quot; height=&quot;334&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the command prompt we can then echo our environment variable and see the value that we configured in our resource file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/live-diff-and-update-using-idea/pod-terminal.png&quot; alt=&quot;Pod Terminal&quot; width=&quot;930&quot; height=&quot;429&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we have demonstrated the deployment process of a Quarkus application to an OpenShift cluster, specifically the free tier Red Hat Developer Sandbox. We have highlighted the usefulness of our &lt;a href=&quot;https://plugins.jetbrains.com/plugin/15921-kubernetes-by-red-hat&quot;&gt;Kubernetes Plugin for Jetbrains IDEA&lt;/a&gt; in facilitating this task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;+
With the editor, you can effortlessly create and update the necessary resources for application deployment. The dynamic resource tree provides real-time visibility of these resources as they are created. By utilizing the diff feature in the editor, you can observe how the cluster manipulates your resources during creation, allowing you to identify important details such as the generated hostname. Lastly, we have showcased additional features of the plugin, including the ability to monitor application logs and access a terminal shell within the running container.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you enjoyed this blog post and tried our plugin, please let us know about bugs and missing features at our &lt;a href=&quot;http://github.com/redhat-developer/intellij-kubernetes/issues/&quot;&gt;GitHub page&lt;/a&gt;. We’d love to hear from you ❤️&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/live-diff-and-update-using-idea/
            </guid>
            
            
            
            <author>Andre Dietisheim</author>
            
        </item>
        
        <item>
            <title>Writing CRUD applications using virtual threads</title>
            <link>
                https://quarkus.io/blog/virtual-threads-2/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week, we published a video demonstrating the creation of a CRUD application using virtual threads in Quarkus. It&amp;#8217;s as simple as adding the &lt;code&gt;@RunOnVirtualThread&lt;/code&gt; annotation on your HTTP resource (or your controller class if you use the Spring compatibility layer).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;
&lt;iframe style=&quot;margin-left: auto; margin-right: auto; display: block;&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/sJ49s7ctpf8?si=XfBB10eabMzGQCKz&quot; title=&quot;Writing CRUD applications using virtual threads&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This companion post explains how it works behind the scenes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-code&quot;&gt;&lt;/a&gt;The code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application is a simple implementation of the &lt;a href=&quot;https://todobackend.com/&quot;&gt;Todo Backend&lt;/a&gt;.
The complete code of this post is available &lt;a href=&quot;https://github.com/quarkusio/virtual-threads-demos/tree/main/crud-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The important part is the &lt;a href=&quot;https://github.com/quarkusio/virtual-threads-demos/blob/main/crud-example/src/main/java/org/acme/crud/TodoResource.java&quot;&gt;TodoResource.java&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme.crud;

import io.quarkus.logging.Log;
import io.quarkus.panache.common.Sort;

import io.smallrye.common.annotation.NonBlocking;
import io.smallrye.common.annotation.RunOnVirtualThread;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.Status;
import java.util.List;


@Path(&quot;/api&quot;)
@RunOnVirtualThread
public class TodoResource {

    /**
     * Just print on which thread the method is invoked.
     */
    private void log() {
        Log.infof(&quot;Called on %s&quot;, Thread.currentThread());
    }

    @GET
    public List&amp;lt;Todo&amp;gt; getAll() {
        log();
        return Todo.listAll(Sort.by(&quot;order&quot;));
    }

    @GET
    @Path(&quot;/{id}&quot;)
    public Todo getOne(@PathParam(&quot;id&quot;) Long id) {
        log();
        Todo entity = Todo.findById(id);
        if (entity == null) {
            throw new WebApplicationException(&quot;Todo with id of &quot; + id + &quot; does not exist.&quot;,
                Status.NOT_FOUND);
        }
        return entity;
    }

    @POST
    @Transactional
    public Response create(@Valid Todo item) {
        log();
        item.persist();
        return Response.status(Status.CREATED).entity(item).build();
    }

    @PATCH
    @Path(&quot;/{id}&quot;)
    @Transactional
    public Response update(@Valid Todo todo, @PathParam(&quot;id&quot;) Long id) {
        log();
        Todo entity = Todo.findById(id);
        entity.id = id;
        entity.completed = todo.completed;
        entity.order = todo.order;
        entity.title = todo.title;
        entity.url = todo.url;
        return Response.ok(entity).build();
    }

    @DELETE
    @Transactional
    public Response deleteCompleted() {
        log();
        Todo.deleteCompleted();
        return Response.noContent().build();
    }

    @DELETE
    @Transactional
    @Path(&quot;/{id}&quot;)
    public Response deleteOne(@PathParam(&quot;id&quot;) Long id) {
        log();
        Todo entity = Todo.findById(id);
        if (entity == null) {
            throw new WebApplicationException(&quot;Todo with id of &quot; + id + &quot; does not exist.&quot;,
                Status.NOT_FOUND);
        }
        entity.delete();
        return Response.noContent().build();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application uses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RESTEasy Reactive - the recommended REST stack for Quarkus. It supports virtual threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hibernate Validation - to validate the Todos created by the user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hibernate ORM with Panache - to interact with the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Argroal connection pool - to manage and recycle database connections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Narayana transaction manager - to run our code inside transactions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The PostgreSQL driver - as we use a PostgreSQL database&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code is similar to a regular implementation of a CRUD service with Quarkus, except for &lt;a href=&quot;https://github.com/quarkusio/virtual-threads-demos/blob/main/crud-example/src/main/java/org/acme/crud/TodoResource.java#L22&quot;&gt;one line&lt;/a&gt;.
We added the &lt;code&gt;@RunOnVirtualThread&lt;/code&gt; annotation on the resource class (line 17).
It instructs Quarkus to invoke these methods on virtual threads instead of regular platform threads (learn more about the difference in the &lt;a href=&quot;https://quarkus.io/blog/virtual-thread-1/&quot;&gt;previous blog post&lt;/a&gt;), including &lt;code&gt;@Transactional&lt;/code&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-threading-model&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-threading-model&quot;&gt;&lt;/a&gt;The threading model&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we have seen in the code, the development model is synchronous.
The interactions with the database uses blocking APIs: you wait for the replies.
That&amp;#8217;s where virtual thread introduces their magic.
Instead of blocking a platform thread, it only blocks the virtual threads:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/virtual-threads/crud-database.png&quot; alt=&quot;Threading model of the application&quot; width=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, when another request comes, the carrier thread can handle it.
It radically reduces the number of platform threads required when there are many concurrent requests.
As a result, the number of worker threads, generally used when using a synchronous and blocking development model, is not the bottleneck anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, that&amp;#8217;s not because you use virtual threads that your application has no more concurrency limit.
There is a new bottleneck: the &lt;strong&gt;database connection pool&lt;/strong&gt;.
When you interact with the database, you ask for a connection to the connection pool (Agroal in our case).
The number of connections is not infinite (20 by default).
Once all the connections are used, you must wait until another processing completes and releases its connection.
You can still handle many requests concurrently, but they will wait for database connections to be available, reducing the response time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-note-about-pinning&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-note-about-pinning&quot;&gt;&lt;/a&gt;A note about pinning&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As the &lt;a href=&quot;https://quarkus.io/blog/virtual-thread-1/&quot;&gt;previous blog post&lt;/a&gt; described, pinning happens when the virtual thread cannot be unmounted from the carrier thread.
In this case, blocking the virtual thread also blocks the carrier thread:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/virtual-threads/pinning.png&quot; alt=&quot;Pinning of the carrier thread&quot; width=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately, in this application, there is no pinning.
The PostgreSQL driver is one of the only JDBC drivers that does not pin.
If you plan to use another database, check first.
We will be discussing how to detect pinning in the next post.
Quarkus, Narayana and Hibernate have been patched to avoid the pinning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pinning is one of many problems that can arise.
The application will suffer from the default object pooling mechanism used by Jackson.
Fortunately, we contributed an SPI to &lt;a href=&quot;https://github.com/FasterXML/jackson-core/pull/1064&quot;&gt;Jackson&lt;/a&gt; that will allow us to remove this allocation hog.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post explains implementing a CRUD application using virtual threads in Quarkus.
You can now use an imperative development model without compromising the application&amp;#8217;s concurrency.
It&amp;#8217;s as simple as using RESTEasy Reactive and adding one annotation: &lt;code&gt;@RunOnVirtualThread&lt;/code&gt; on your resource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We tailored Quarkus and upstream projects (such as Hibernate, Narayana, SmallRye Mutiny, etc.) to become virtual-thread-friendly.
As we will see in other posts, most Quarkus extensions are ready to be used with virtual threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That said, while virtual threads increase the concurrency, you will likely hit other bottlenecks, such as the number of database connections managed in the pool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next post and video, we will see how to test our application and detect pinning.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/virtual-threads-2/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
    </channel>
</rss>
